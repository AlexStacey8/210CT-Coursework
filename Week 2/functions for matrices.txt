Task 2:
Shuffle Algorithm: O(n)
Factoral Algorithm: O(n)

Task 3:

Pseudocode for functions that add, subtract and multiple matrices.

These fuctions work by accepting two matrices which are arrays where each row in the matrix is an array within the array. 
example:
matrix = [[1,2,3],
	  [4,5,6],
	  [7,8,9]]

AddingMatrices(matrix1,matrix2)

	for i <- 0 to length[matrix1]
		for j <- 0 length[matrix1]
			matrix1[i][j] = matrix1[i][j] + matrix2[i][j]

	RETURN(matrix1)

Big O notation for this algorithm = O(n^2)

SubtractingMatrices(matrix1,matrix2)

	for i <- 0 to length[matrix1]
		for j <- 0 length[matrix1]
			matrix1[i][j] = matrix1[i][j] - matrix2[i][j]

	RETURN(matrix1)
Big O notation for this algorithm = O(n^2)

when you want to multiply a matrix by and integer or a float

MultiplyingMatrix(matrix,x)

	for i <- 0 to length[matrix]
		for j <- 0 to length[matrix]
			matrix[i][j] <- matrix[i][j] * x


	RETURN(matrix)

Big O notation for this algorithm = O(n^2)


when you want to multiply a matrix by another matrix
This fuction only works if you provide a Final matrix full of 0s
for example
[[1,2],[3,4]] * [[3,5],[2,4]]
The resulting matrix would be a 2 by 2 matrix so the final matrix would be entered as [[0,0],[0,0]]

MultiplyingMatrices(matrix1,matrix2,finalMatrix)

	for i <- 0 to length[matrix1]
		for j <- 0 to length[matrix1]
			for k <- 0 to length[matrix1]
				counter <- matrix1[i][k] * matrix2[k][j] 
				finalMatrix[i][j] <- counter + finalMatrix[i][j]


	RETURN(finalMatrix)

Big O notation for this algorithm = O(n^3)


Method of caculating A = B*C - 2*(B+C)

x <- MultiplyingMatrix(B,C,finalMatrix)
y <- AddingMatrices(B.C)
z <- MultiplyingMatrix(y,2)

finalResult <- SubtractingMatrices(x,z)

